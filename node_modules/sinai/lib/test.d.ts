import { Class } from './utils';
import { BG, BM, BA, BG0, BM0 } from './core/base';
export declare type PartialModule<T> = {
    [K in keyof T]?: Partial<T[K]>;
};
export declare type PartialModules<T> = {
    [K in keyof T]?: PartialModule<T[K]>;
};
export interface Injection<S, G, M, MD> {
    state?: Partial<S>;
    getters?: Partial<G>;
    mutations?: Partial<M>;
    modules?: PartialModules<MD>;
}
declare type GetterState<G extends BG<any, any>> = G extends BG<infer S, any> ? S : never;
declare type GetterModules<G extends BG<any, any>> = G extends BG<any, infer SG> ? SG : never;
declare type MutationState<M extends BM<any>> = M extends BM<infer S> ? S : never;
declare type ActionState<A extends BA<any, any, any, any>> = A extends BA<infer S, any, any, any> ? S : never;
declare type ActionGetters<A extends BA<any, any, any, any>> = A extends BA<any, infer G, any, any> ? G : never;
declare type ActionMutations<A extends BA<any, any, any, any>> = A extends BA<any, any, infer M, any> ? M : never;
declare type ActionModules<A extends BA<any, any, any, any>> = A extends BA<any, any, any, infer SGMA> ? SGMA : never;
export declare function stub<T extends BG<{}, {}>>(Getters: Class<T>, injection?: Injection<GetterState<T>, never, never, GetterModules<T>>): T & {
    state: GetterState<T>;
    modules: GetterModules<T>;
};
export declare function stub<T extends BM<{}>>(Mutations: Class<T>, injection?: Injection<MutationState<T>, never, never, never>): T & {
    state: MutationState<T>;
};
export declare function stub<T extends BA<{}, BG0, BM0, {}>>(Actions: Class<T>, injection?: Injection<ActionState<T>, ActionGetters<T>, ActionMutations<T>, ActionModules<T>>): T & {
    state: ActionState<T>;
    getters: ActionGetters<T>;
    mutations: ActionMutations<T>;
    modules: ActionModules<T>;
};
export {};
